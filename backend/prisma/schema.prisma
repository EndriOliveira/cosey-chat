generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @db.VarChar(255) @default(uuid())
  name         String         @db.VarChar(255)
  cpf          String         @db.VarChar(255)
  phone        String         @db.VarChar(255)
  email        String         @db.VarChar(255)
  password     String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  active       Boolean        @default(true)

  message      Message[]      @relation("FK_Message_User_UserId")
  refreshToken RefreshToken[] @relation("FK_RefreshToken_User_UserId")
  user1        Chat[]         @relation("FK_Chat_User_User1")
  user2        Chat[]         @relation("FK_Chat_User_User2")
}

model RefreshToken {
  id        String   @id @db.VarChar(255) @default(uuid())
  token     String   @db.VarChar(255)
  userId    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  user      User     @relation("FK_RefreshToken_User_UserId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model File {
  id        String    @id @db.VarChar(255) @default(uuid())
  url       String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean   @default(true)

  message   Message[] @relation("FK_Message_File_FileId")
}

model Chat {
  id        String     @id @db.VarChar(255) @default(uuid())
  user1Id   String     @db.VarChar(255)
  user2Id   String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  active    Boolean    @default(true)

  message   Message[] @relation("FK_Message_Chat_ChatId")
  user1     User      @relation("FK_Chat_User_User1", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2     User      @relation("FK_Chat_User_User2", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Message {
  id          String   @id @db.VarChar(255) @default(uuid())
  chatId      String   @db.VarChar(255)
  userId      String   @db.VarChar(255)
  fileId      String   @db.VarChar(255) 
  content     String   @db.VarChar(255)
  messageType String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)

  chat        Chat     @relation("FK_Message_Chat_ChatId", fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User     @relation("FK_Message_User_UserId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file        File     @relation("FK_Message_File_FileId", fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}